{"version":3,"sources":["Components/Feed/SinglePaff.jsx","Services/BlockchainService.js","Components/Feed/Feed.jsx","Components/Feed/Stores/TipPaffStore.js","Components/Navbar/Components/NoMetamask.jsx","Components/Navbar/Components/LoggedIn.jsx","Components/Navbar/Components/SearchBar.jsx","Components/Navbar/Stores/SearchBarStore.js","Components/Navbar/Navbar.jsx","Pages/Profile/Components/ProfileInfo.jsx","Pages/Profile/Components/PublishPaff.jsx","Pages/Profile/Components/Stores/PublishPaffStore.js","Pages/Profile/Stores/ProfileStore.js","Pages/Profile/Profile.jsx","Pages/Landing/NoEthereum.jsx","Pages/Landing/Landing.jsx","Pages/Landing/Stores/LandingStore.js","App.jsx","reportWebVitals.js","index.js"],"names":["observer","isUserFeed","content","tipAmount","date","author","id","tipStore","className","href","string","slice","parseInt","window","web3","utils","fromWei","toString","userAddress","onClick","action","timestamp","Date","getDate","getMonth","getFullYear","getDateString","BlockchainService","networkData","paffs","tipPaffOwner","a","getMethods","send","from","value","toWei","makeAutoObservable","this","ethereum","loadWeb3","getNetworkData","loadBlockchainData","Web3","enable","currentProvider","console","log","Promise","res","rej","eth","net","getId","then","Paffer","networks","getAccounts","accounts","runInAction","Contract","abi","address","paffer","methods","sender","uploadPaff","catch","resp","paffCount","call","i","newPaff","push","fetchAllPaffs","filter","e","service","toggleStatus","status","props","children","length","map","NoMetamask","LoggedIn","to","substring","store","onSubmit","preventDefault","submit","type","getContent","target","placeholder","onChange","setContent","style","display","getProfiles","SearchBarStore","profiles","input","ascending","checkSuggestions","typedLength","setTimeout","getProfileAddressesAsync","forEach","includes","focus","setSelectionRange","allPaffs","filteredAuthors","location","networkVersion","ProfileInfo","publish","errorMessage","PublishPaffStore","pushToList","checkForErrors","x","trim","ProfileStore","publishPaffStore","pushPaff","profileAddress","fetchPaffs","now","unshift","profileStore","useParams","getPaffs","NoEthereum","flexDirection","textAlign","color","reverse","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92d2bcd3.chunk.js","sourcesContent":["import Identicon from 'react-identicons';\nimport PlusOneIcon from '@material-ui/icons/PlusOne';\nimport {observer} from 'mobx-react';\nimport {action} from 'mobx';\n\nfunction SinglePaff({isUserFeed, content, tipAmount, date, author, id, tipStore}) {  \n  const getDateString = (timestamp) =>{\n    const date = new Date(parseInt(timestamp*1000)); // ili timestamp*1000?\n    const day = date.getDate();\n    const month = date.getMonth()+1;\n    const year = date.getFullYear();\n    const fullDate = day+'.'+month+'.'+year+'.';\n    return fullDate;\n  }\n  return (\n    <div className=\"feed-post\">\n      {\n        !isUserFeed?\n        <div className=\"icon\">\n          <a href={\"http://localhost:3000/profile/\" + author}>\n            <Identicon string={author} />\n          </a>\n        </div>\n        :null\n      }\n      <div>\n        <p className=\"content\">{content}</p>\n        <div className=\"post-info\">\n          {\n            !isUserFeed?\n            <a href={\"http://localhost:3000/profile/\" + author}>\n              <label className=\"autor-name\">{author.slice(0,8)}</label>\n            </a>\n            :null\n          }\n          <label className=\"paff-amount\">\n            {parseInt(window.web3.utils.fromWei((tipAmount*100).toString(), 'ether')) } PAffs\n            {\n              author !== tipStore.userAddress?\n              <PlusOneIcon onClick={action(()=>{tipStore.onClick(id)})}/>:null\n            }\n          </label>\n          <label className=\"date\">on {getDateString(date)}</label>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default observer(SinglePaff);\n","import {makeAutoObservable, runInAction} from 'mobx';\nimport Web3 from 'web3';\nimport Paffer from '../abis/Paffer.json';\n\nexport default class BlockchainService{\n  networkData = null;\n  userAddress = '';\n  paffs = [];\n  constructor(){\n    makeAutoObservable(this);\n    if(window.web3 || window.ethereum){\n      this.loadWeb3();\n      this.getNetworkData();\n      this.loadBlockchainData();\n    }\n  }\n  async loadWeb3(){\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum);\n      window.ethereum.enable();\n    }else if(window.web3){\n      window.web3 = new Web3(window.web3.currentProvider);\n    }else{\n      console.log('Non-ethereum browser detected. Condider trying MetaMask.')\n    }\n  }\n  getNetworkData(){\n    return new Promise((res,rej)=>{\n      window.web3.eth.net.getId()\n      .then((id)=>{\n        res(Paffer.networks[id])\n      })\n    });\n  }\n  async loadBlockchainData(){\n    const accounts = await window.web3.eth.getAccounts();\n    runInAction(()=>{\n      this.userAddress = accounts[0];\n    });\n  }\n  getMethods(){\n    return new Promise(async(res, rej)=>{\n      if(this.networkData){\n        const paffer = await new window.web3.eth.Contract(Paffer.abi, this.networkData.address)\n        res(paffer.methods);\n      }\n      this.getNetworkData()\n      .then((networkData)=>{\n        if(networkData){\n          const paffer = new window.web3.eth.Contract(Paffer.abi, networkData.address)\n          res(paffer.methods);\n        }\n      });\n    });\n  }\n  uploadPaff(content, sender){\n    return new Promise((res, rej)=>{\n      this.getMethods()\n      .then(methods=>{\n        methods.uploadPaff(content).send({from:sender})\n        .then(()=>{\n          res(true);\n        })\n        .catch(()=>{\n          rej(false);\n        });\n      });\n    });\n  }\n  fetchAllPaffs(){\n    return new Promise((res, rej)=>{\n      let paffs = [];\n      this.getMethods()\n      .then(async resp=>{\n        const methods = resp;\n        const paffCount = await methods.paffCount().call();\n        if(!paffCount){\n          rej([]);\n        }\n        for (let i = 1; i <= paffCount; i++){\n          const newPaff = await methods.paffs(i).call();\n          paffs.push(newPaff);\n        }\n        this.paffs = paffs;\n        res(paffs);\n      })\n    });\n  }\n  async fetchAuthorPaffs(author){    \n    this.paffs = await this.fetchAllPaffs();\n    if(!this.paffs){\n      return [];\n    }\n    return this.paffs.filter(e=>e.author===author);\n  }\n  tipPaffOwner = async (id) =>{\n    const methods = await this.getMethods();    \n    methods.tipPaffOwner(id).send({from:this.userAddress, value: window.web3.utils.toWei('0.01', 'Ether')});\n  }\n}","import SinglePaff from './SinglePaff';\nimport './style/feed.css';\nimport {observer} from 'mobx-react';\nimport TipPaffStore from './Stores/TipPaffStore';\nconst tipStore = new TipPaffStore();\n\n\nfunction Feed(props) {\n  return <div className=\"feed\">\n      {\n        props.children.length ?\n        props.children.map((e)=>{\n          return <SinglePaff isUserFeed={props.isUserFeed} content={e.content} date={e.date} tipAmount={e.tipAmount} author={e.author} id={e.id} tipStore={tipStore} />\n        })\n        :\n        <p>loading paffs or can't find any</p>\n      }\n    </div>\n}\nexport default observer(Feed);\n","import {makeAutoObservable} from 'mobx';\nimport BlockchainService from '../../../Services/BlockchainService';\n\nexport default class TipPaffStore{\n  userAddress;\n  service = new BlockchainService();\n  constructor(){\n    makeAutoObservable(this);\n    this.userAddress = this.service.userAddress;\n  }\n  toggleStatus = () =>{\n    this.status += 1;\n  }\n  onClick = (id) =>{\n    this.service.tipPaffOwner(id);\n  }\n}","export default function NoMetamask() {\n  return <p>Please connect metamask to Ropsten Test Network and refresh to load the content.</p>\n}","import Identicon from 'react-identicons';\nimport {Link} from 'react-router-dom';\n\nfunction LoggedIn({userAddress}) {\n  return (\n    <div className=\"profile-info\">\n      <Link to={`../profile/${userAddress}`}>\n        <Identicon string={userAddress} />\n        <h3>{userAddress.substring(0, 15)}</h3>\n      </Link>\n    </div>\n  )\n}\nexport default LoggedIn;","import {observer} from 'mobx-react';\n\nfunction SearchBar({store}) {\n  return (\n    <form className=\"search-bar\" onSubmit={(e)=>{e.preventDefault();store.submit()}}>\n      <input \n        type=\"text\"\n        value={store.getContent()}\n        onClick={(e)=>store.onClick(e.target)}\n        placeholder=\"autocompleting search\" \n        onChange={e=>store.setContent(e.target)}/>\n      <input \n        type=\"submit\"\n        style={{display: 'none'}}\n        />\n      <div className=\"suggested-addresses\">\n        {[\n          ...store.getProfiles().map(e=>{\n            return <a href={\"http://localhost:3000/profile/\"+e}>\n              {e.slice(0,5)}\n            </a>\n          }).slice(0,4)\n        ]}\n      </div>\n    </form>\n  )\n}\nexport default observer(SearchBar);\n","import {makeAutoObservable, runInAction} from 'mobx';\nimport BlockchainService from '../../../Services/BlockchainService';\n\nexport default class SearchBarStore{\n  content = '';\n  service = new BlockchainService();\n  profiles = [];\n  constructor(){\n    makeAutoObservable(this);\n  }\n  getContent(){\n    return this.content;\n  }\n  setContent(input){\n    let ascending = true;\n    if((input.value.length < this.content.length)){\n      ascending = false;\n    }\n    this.content = input.value;\n    this.checkSuggestions(input, ascending);\n  }\n  async checkSuggestions(input, ascending){\n    const typedLength = this.content.length;\n    if(typedLength > 1){\n      setTimeout(async()=>{\n        if(typedLength === this.content.length){\n          const profiles = await this.getProfileAddressesAsync();\n          if(profiles.length){\n            runInAction(()=>{\n              if(typedLength > 2 && ascending){\n                this.content = profiles[0].author;\n              }\n              this.profiles = [];\n              profiles.forEach(e => {\n                if(!this.profiles.includes(e.author)){\n                  this.profiles.push(e.author);\n                }\n              });\n            });\n            input.focus();\n            input.setSelectionRange(typedLength, this.content.length);\n          }else{\n            runInAction(()=>{\n              this.profiles = [];\n            });\n          }\n        }\n      }, 100);\n    }else{\n      this.profiles = [];\n    }\n  }\n  getProfiles(){\n    return this.profiles;\n  }\n  onClick(input){\n    this.content = '0x';\n    this.checkSuggestions(input, true);\n  }\n  async getProfileAddressesAsync(){\n    const allPaffs = await this.service.fetchAllPaffs();\n    const filteredAuthors = allPaffs.filter(e=>{return e.author.includes(this.content)});\n    return filteredAuthors;\n  }\n  submit(){\n    window.location.href = (\"http://localhost:3000/profile/\" + this.content);\n  }\n}","import './style/navbar.css';\nimport {observer} from 'mobx-react';\nimport NoMetamask from './Components/NoMetamask';\nimport LoggedIn from './Components/LoggedIn';\nimport SearchBar from './Components/SearchBar';\nimport SearchBarStore from './Stores/SearchBarStore';\n\nfunction Navbar({userAddress}) {\n  return (\n    <nav>\n      <a href=\"http://localhost:3000\">\n        <h1>Paffer</h1>\n      </a>\n      {\n        userAddress && window.ethereum.networkVersion == 3?\n        <LoggedIn userAddress={userAddress} />\n        :<NoMetamask />        \n      }\n      {\n        (window.web3 || window.ethereum)?\n        <SearchBar store={new SearchBarStore()} />\n        :null\n      }\n    </nav>\n  )\n}\nexport default observer(Navbar);","import Identicon from 'react-identicons';\nimport './style/profileInfo.css';\n\nfunction ProfileInfo({address}) {\n  return (\n    <div className=\"profileInfo\">\n      <h2>\n        Posts from: &ensp;\n        <Identicon string={address} />\n        {address.substring(0, 15)}\n      </h2>\n    </div>\n  )\n}\nexport default ProfileInfo;","import './style/publishPaff.css';\nimport {observer} from 'mobx-react';\n\nfunction PublishPaff({store}) {\n  return (\n    <div className=\"publish\">\n      <div className=\"publishPaff\">\n        <input value={store.content} onChange={e=>{store.setContent(e.target.value)}} type=\"text\" placeholder=\"Publish a Paff\"/>\n        <button onClick={()=>store.publish(store.value)}>publish</button>\n      </div>\n      <p>{store.errorMessage}</p>\n    </div>\n  )\n}\nexport default observer(PublishPaff);","import {makeAutoObservable} from 'mobx';\n\nexport default class PublishPaffStore{\n  content = '';\n  publish;\n  errorMessage = '';\n  constructor(pushToList){\n    this.publish = () =>{\n      if(this.checkForErrors()){\n        pushToList(this.content);\n      }\n    }\n    makeAutoObservable(this);\n  }\n  getContent(){\n    return this.content;\n  }\n  setContent(x){\n    this.content = x;\n  }\n  checkForErrors(){\n    if(this.content.length <= 0 || !this.content.trim().length){\n      this.errorMessage = 'You can\\'t publish an empty paff!';\n      return false;\n    }\n    if(this.content.length > 25){\n      this.errorMessage = 'Paff length should be <25 characters!';\n      return false;\n    }\n    return true;\n  }\n}","import {makeAutoObservable, runInAction} from 'mobx';\nimport PublishPaffStore from '../Components/Stores/PublishPaffStore';\nimport BlockchainService from '../../../Services/BlockchainService';\n\nexport default class ProfileStore{\n  profileAddress;\n  paffs = [];\n  publishPaffStore = new PublishPaffStore((x)=>this.pushPaff(x));\n  service = new BlockchainService();\n  \n  constructor(address){\n    this.profileAddress = address;\n    makeAutoObservable(this);\n    if(window.web3 || window.ethereum){\n      this.fetchPaffs();\n    }\n  }\n  getPaffs(){\n    return this.paffs;\n  }\n  fetchPaffs(){\n    this.service.fetchAllPaffs()\n    .then((res)=>{\n      runInAction(()=>{\n        this.paffs = res.filter(e=>{return e.author===this.profileAddress});\n      });\n    });\n  }\n  pushPaff(content){\n    const date = Date.now()/1000;\n    this.service.uploadPaff(content, this.profileAddress)\n    .then(()=>{\n      this.paffs.unshift({\n        content: content,\n        date: date,\n        address: this.profileAddress,\n        tipAmount: 0\n      });\n    })\n    .catch(()=>{\n      this.publishPaffStore.errorMessage = 'rejected';\n    })\n  }\n\n}","import {observer} from 'mobx-react';\nimport Feed from \"../../Components/Feed/Feed\";\nimport Navbar from \"../../Components/Navbar/Navbar\";\nimport ProfileInfo from './Components/ProfileInfo';\nimport PublishPaff from './Components/PublishPaff';\nimport {useParams} from 'react-router-dom';\nimport ProfileStore from './Stores/ProfileStore';\n\nlet profileStore = new ProfileStore('0x');\n\nfunction Profile() {\n  const address = useParams().address;\n  if(profileStore.profileAddress !== address){\n    profileStore = null;\n    profileStore = new ProfileStore(address);\n  }\n  return <div className=\"profile\">\n      <Navbar userAddress={profileStore.service.userAddress} />\n      {\n        profileStore.service.userAddress===address?\n        <PublishPaff store={profileStore.publishPaffStore}/>:null\n      }\n      <ProfileInfo address={address} />\n      <Feed isUserFeed={true}>\n        {[\n          ...profileStore.getPaffs()\n        ]}\n      </Feed>\n    </div>\n}\nexport default observer(Profile);","function NoEthereum() {\n  return (\n    <div style={{display:'flex', flexDirection:'column', textAlign:'center'}}>\n      <h1>\n        No ethereum browser found.\n      </h1>\n      <h2>\n        To run this app please add Metamask to your browser.\n      </h2>\n      <h4>\n        <a style={{color:'blue'}} href=\"https://metamask.io/download\">https://metamask.io/download</a>\n      </h4>\n    </div>\n  )\n}\nexport default NoEthereum;","import Navbar from \"../../Components/Navbar/Navbar\";\nimport LandingStore from './Stores/LandingStore';\nimport {observer} from 'mobx-react';\nimport Feed from \"../../Components/Feed/Feed\";\nimport NoEthereum from './NoEthereum';\n\nconst store = new LandingStore();\n\nfunction Landing() {\n  if(window.web3 || window.ethereum){\n    return (\n      <div className=\"landing\">\n        <Navbar userAddress={store.service.userAddress} />\n        <Feed isUserFeed={false}>\n          {[\n            ...store.getPaffs()\n          ]}\n        </Feed>\n      </div>\n    )\n  }else{\n    return <NoEthereum />\n  }\n}\nexport default observer(Landing);\n","import {makeAutoObservable} from 'mobx';\nimport BlockchainService from '../../../Services/BlockchainService';\n\nexport default class LandingStore{\n  paffs = [];\n  service = new BlockchainService();\n  \n  constructor(address){\n    this.userAddress = address;\n    makeAutoObservable(this);\n    if(window.web3 || window.ethereum){\n      this.fetchPaffs();\n    }\n  }\n  getPaffs(){\n    return this.paffs.slice().reverse();\n  }\n  fetchPaffs(){\n    this.service.fetchAllPaffs()\n    .then((res)=>{\n      this.paffs = res;\n    });\n  }\n}","import './style/App.css';\nimport {Route, BrowserRouter as Router} from 'react-router-dom';\nimport Profile from './Pages/Profile/Profile';\nimport Landing from './Pages/Landing/Landing';\nimport {observer} from \"mobx-react\";\n\nif(!window.web3){\n  //alert(\"This app requires blockchain browser to run. Consider using metamask :)\")\n  //alert(\"Redirecting to metamask.io\");\n  //window.location.href = \"https://metamask.io/download\";\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\">\n          <Landing />\n        </Route>\n        <Route path=\"/profile/:address\">\n          <Profile />\n        </Route>\n      </Router>\n    </div>\n  );\n}\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}